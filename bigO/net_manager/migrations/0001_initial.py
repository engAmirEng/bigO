# Generated by Django 5.1.7 on 2025-05-27 14:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0009_siteconfiguration_sync_brake"),
        ("node_manager", "0023_alter_supervisorprocessinfo_pid"),
    ]

    operations = [
        migrations.CreateModel(
            name="DNSRecord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("provider_sync_at", models.DateTimeField(blank=True, null=True)),
                ("id_provider", models.CharField(blank=True, max_length=255, null=True)),
                ("type", models.PositiveSmallIntegerField(choices=[(1, "A"), (2, "AAAA"), (3, "CNAME")])),
                ("proxied", models.BooleanField(default=False)),
                (
                    "domain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="domain_dnsrecords", to="core.domain"
                    ),
                ),
                (
                    "value_domain",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="value_domain_dnsrecords",
                        to="core.domain",
                    ),
                ),
                (
                    "value_ip",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="node_manager.publicip",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("value_domain__isnull", False), ("value_ip__isnull", True)),
                            models.Q(("value_domain__isnull", True), ("value_ip__isnull", False)),
                            _connector="OR",
                        ),
                        name="valueip_or_valuedomain_dnsrecord",
                    )
                ],
            },
        ),
    ]
