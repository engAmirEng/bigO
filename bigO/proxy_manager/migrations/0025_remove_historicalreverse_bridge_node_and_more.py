# Generated by Django 5.1.10 on 2025-09-08 07:04
import uuid

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


def populate(apps, schema_editor):
    NodeOutbound = apps.get_model('proxy_manager', 'NodeOutbound')
    Reverse = apps.get_model('proxy_manager', 'Reverse')
    ConnectionRuleOutbound = apps.get_model('proxy_manager', 'ConnectionRuleOutbound')
    ConnectionTunnelOutbound = apps.get_model('proxy_manager', 'ConnectionTunnelOutbound')

    OutboundType = apps.get_model('proxy_manager', 'OutboundType')
    OutboundConnector = apps.get_model('proxy_manager', 'OutboundConnector')

    for i in NodeOutbound.objects.all():
        ot = OutboundType()
        ot.name = f"rule{i.rule_id}id{i.id}name{i.name}"
        ot.to_inbound_type = i.to_inbound_type
        ot.xray_outbound_template = i.xray_outbound_template
        oc = OutboundConnector()
        oc.outbound_type = ot
        oc.inbound_spec = i.inbound_spec
        oc.dest_node = None
        cro = ConnectionRuleOutbound()
        cro.rule_id = i.rule_id
        cro.base_conn_uuid = uuid.uuid4()
        cro.balancer_allocation_str = i.balancer_allocation_str
        cro.is_reverse = False
        cro.connector = oc
        cro.apply_node = i.node
        ot.save()
        oc.save()
        cro.save()
    for i in Reverse.objects.all():
        ot = OutboundType()
        ot.name = f"reverse-rule{i.rule_id}id{i.id}name{i.name}"
        ot.to_inbound_type = i.to_inbound_type
        ot.xray_outbound_template = i.xray_outbound_template
        oc = OutboundConnector()
        oc.outbound_type = ot
        oc.inbound_spec = i.inbound_spec
        oc.dest_node = i.portal_node
        cro = ConnectionRuleOutbound()
        cro.rule_id = i.rule_id
        cro.base_conn_uuid = i.base_conn_uuid
        cro.balancer_allocation_str = i.balancer_allocation_str
        cro.is_reverse = True
        cro.connector = oc
        cro.apply_node = i.bridge_node
        ot.save()
        oc.save()
        cro.save()
    for cto in ConnectionTunnelOutbound.objects.all():
        if cto.is_reverse:
            ot = OutboundType()
            ot.name = f"reverse-tunn{cto.tunnel_id}id{cto.id}name{cto.name}"
            ot.to_inbound_type = cto.to_inbound_type
            ot.xray_outbound_template = cto.xray_outbound_template
            oc = OutboundConnector()
            oc.outbound_type = ot
            oc.inbound_spec = cto.inbound_spec
            oc.dest_node = cto.tunnel.source_node
            cto.connector = oc
        else:
            ot = OutboundType()
            ot.name = f"tunn{cto.tunnel_id}id{cto.id}name{cto.name}"
            ot.to_inbound_type = cto.to_inbound_type
            ot.xray_outbound_template = cto.xray_outbound_template
            oc = OutboundConnector()
            oc.outbound_type = ot
            oc.inbound_spec = cto.inbound_spec
            oc.dest_node = cto.tunnel.dest_node
            cto.connector = oc
        ot.save()
        oc.save()
        cto.save()

def reverse_populate(apps, schema_editor):
    NodeOutbound = apps.get_model('proxy_manager', 'NodeOutbound')
    Reverse = apps.get_model('proxy_manager', 'Reverse')
    ConnectionRuleOutbound = apps.get_model('proxy_manager', 'ConnectionRuleOutbound')
    ConnectionTunnelOutbound = apps.get_model('proxy_manager', 'ConnectionTunnelOutbound')

    for i in ConnectionRuleOutbound:
        if i.is_reverse:
           r = Reverse()
           r.rule_id = i.rule_id
           r.name = f"{i.connector.outbound_type.name}-connector{i.connector.id}-{i.id}"
           r.name = i.connector.outbound_type.name.split("name")[1]
           r.balancer_allocation_str = i.balancer_allocation_str
           r.bridge_node = i.apply_node
           r.portal_node = i.connector.dest_node
           r.to_inbound_type = i.connector.outbound_type.to_inbound_type
           r.xray_outbound_template = i.connector.outbound_type.xray_outbound_template
           r.inbound_spec = i.connector.inbound_spec
           r.base_conn_uuid = uuid
           r.save()
        else:
            no = NodeOutbound()
            no.rule_id = i.rule_id
            no.name = f"{i.connector.outbound_type.name}-connector{i.connector.id}-{i.id}"
            no.name = i.connector.outbound_type.name.split("name")[1]
            no.balancer_allocation_str = i.balancer_allocation_str
            no.node = i.apply_node
            no.to_inbound_type = i.connector.outbound_type.to_inbound_type
            no.xray_outbound_template = i.connector.outbound_type.xray_outbound_template
            no.inbound_spec = i.connector.inbound_spec
            no.save()
    for cto in ConnectionTunnelOutbound:
        if cto.is_reverse:
           cto.name = f"{cto.connector.outbound_type.name}-connector{cto.connector.id}-{cto.id}"
           cto.name = cto.connector.outbound_type.name.split("name")[1]
           cto.to_inbound_type = cto.connector.outbound_type.to_inbound_type
           cto.xray_outbound_template = cto.connector.outbound_type.xray_outbound_template
           cto.inbound_spec = cto.connector.inbound_spec
        else:
            cto.name = f"{cto.connector.outbound_type.name}-connector{cto.connector.id}-{cto.id}"
            cto.name = cto.connector.outbound_type.name.split("name")[1]
            cto.to_inbound_type = cto.connector.outbound_type.to_inbound_type
            cto.xray_outbound_template = cto.connector.outbound_type.xray_outbound_template
            cto.inbound_spec = cto.connector.inbound_spec
        cto.save()


class Migration(migrations.Migration):

    dependencies = [
        ("node_manager", "0036_nodelatestsyncstat_ip_a_and_more"),
        ("proxy_manager", "0024_remove_inboundcombodomainaddress_combo_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="historicalreverse",
            name="bridge_node",
        ),
        migrations.RemoveField(
            model_name="historicalreverse",
            name="history_user",
        ),
        migrations.RemoveField(
            model_name="historicalreverse",
            name="inbound_spec",
        ),
        migrations.RemoveField(
            model_name="historicalreverse",
            name="portal_node",
        ),
        migrations.RemoveField(
            model_name="historicalreverse",
            name="rule",
        ),
        migrations.RemoveField(
            model_name="historicalreverse",
            name="to_inbound_type",
        ),

        migrations.CreateModel(
            name="OutboundType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.SlugField(unique=True, max_length=127)),
                (
                    "xray_outbound_template",
                    models.TextField(
                        help_text="{{ source_node, dest_node, tag, nodeinternaluser, combo_stat: {'address', 'port', 'sni', 'domainhostheader', 'touch_node'} }}"
                    ),
                ),
                (
                    "to_inbound_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="proxy_manager.inboundtype",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OutboundConnector",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_managed", models.BooleanField(default=False)),
                (
                    "dest_node",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="node_manager.node",
                    ),
                ),
                (
                    "inbound_spec",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="+", to="proxy_manager.inboundspec", null=True, blank=True
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ConnectionRuleOutbound",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "balancer_allocation_str",
                    models.CharField(help_text="balancertag1:weght,balancertag1:weght", max_length=255),
                ),
                ("is_reverse", models.BooleanField(default=False)),
                (
                    "apply_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="+", to="node_manager.node"
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rule_outbounds",
                        to="proxy_manager.connectionrule",
                    ),
                ),
                (
                    "connector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="proxy_manager.outboundconnector",
                    ),
                ),
                (
                    "base_conn_uuid",
                    models.UUIDField(),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),

        migrations.AddField(
            model_name="connectiontunneloutbound",
            name="connector",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="proxy_manager.outboundconnector",
            ),
        ),
        migrations.AddField(
            model_name="outboundconnector",
            name="outbound_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="variants", to="proxy_manager.outboundtype"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="connectiontunneloutbound",
            name="unique_name_tunnel_connectiontunneloutbound",
        ),

        migrations.RunPython(populate, reverse_code=reverse_populate),

        migrations.RemoveField(
            model_name="nodeoutbound",
            name="inbound_spec",
        ),
        migrations.RemoveField(
            model_name="nodeoutbound",
            name="node",
        ),
        migrations.RemoveField(
            model_name="nodeoutbound",
            name="rule",
        ),
        migrations.RemoveField(
            model_name="nodeoutbound",
            name="to_inbound_type",
        ),
        migrations.RemoveField(
            model_name="reverse",
            name="bridge_node",
        ),
        migrations.RemoveField(
            model_name="reverse",
            name="inbound_spec",
        ),
        migrations.RemoveField(
            model_name="reverse",
            name="portal_node",
        ),
        migrations.RemoveField(
            model_name="reverse",
            name="rule",
        ),
        migrations.RemoveField(
            model_name="reverse",
            name="to_inbound_type",
        ),
        migrations.RemoveField(
            model_name="connectiontunneloutbound",
            name="inbound_spec",
        ),
        migrations.RemoveField(
            model_name="connectiontunneloutbound",
            name="name",
        ),
        migrations.RemoveField(
            model_name="connectiontunneloutbound",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="connectiontunneloutbound",
            name="to_inbound_type",
        ),
        migrations.RemoveField(
            model_name="connectiontunneloutbound",
            name="xray_outbound_template",
        ),
        migrations.CreateModel(
            name="HistoricalOutboundType",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.SlugField(max_length=127)),
                (
                    "xray_outbound_template",
                    models.TextField(
                        help_text="{{ source_node, dest_node, tag, nodeinternaluser, combo_stat: {'address', 'port', 'sni', 'domainhostheader', 'touch_node'} }}"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_inbound_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="proxy_manager.inboundtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical outbound type",
                "verbose_name_plural": "historical outbound types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.DeleteModel(
            name="HistoricalNodeOutbound",
        ),
        migrations.DeleteModel(
            name="HistoricalReverse",
        ),
        migrations.DeleteModel(
            name="NodeOutbound",
        ),
        migrations.DeleteModel(
            name="Reverse",
        ),
    ]
